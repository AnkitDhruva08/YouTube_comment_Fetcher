{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ankit Mishra\\\\Django\\\\YouTube-DataFetcher\\\\frontend\\\\src\\\\pages\\\\ProductsListPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchYouTubeData } from '../api/youtubeApi'; // Your API for fetching YouTube data\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:8000/youtube/';\nconst FetchDataForm = () => {\n  _s();\n  const [channelUrl, setChannelUrl] = useState(''); // For YouTube channel URL input\n  const [comments, setComments] = useState([]); // For storing fetched comments\n  const [error, setError] = useState(null); // For error handling\n\n  // Function to fetch comments from the backend\n  const postComment = async () => {\n    try {\n      const response = await fetch(`${API_BASE}comments/`); // Adjust API URL if needed\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Validate if the response data is an array\n      if (Array.isArray(data)) {\n        setComments(data);\n      } else {\n        console.error('Expected an array, but received:', data);\n        setComments([]); // Fallback to empty array\n      }\n    } catch (err) {\n      console.error('Error fetching comments:', err);\n      setError('Error fetching comments.');\n    }\n  };\n\n  // Function to handle fetching YouTube data\n  const handleFetch = async () => {\n    try {\n      await fetchYouTubeData(channelUrl); // Assuming this sends data to the backend\n      alert('Data Inserted  successfully!');\n      postComment(); // Fetch the stored comments after data is processed\n    } catch (err) {\n      alert('Error fetching YouTube data.');\n    }\n  };\n\n  // Function to download comments as an Excel file\n  const handleDownloadExcel = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}comments/`); // Adjust API URL if needed\n      if (!response.ok) {\n        throw new Error('Failed to download Excel file');\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'comments.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      link.parentNode.removeChild(link);\n    } catch (err) {\n      alert('Error downloading the Excel file.');\n    }\n  };\n\n  // Fetch comments when the component mounts\n  useEffect(() => {\n    fetchComments(); // Fetch comments on component mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"YouTube Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter YouTube Channel URL\",\n      value: channelUrl,\n      onChange: e => setChannelUrl(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetch,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.comment_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)]\n        }, comment.comment_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownloadExcel,\n      children: \"Download Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchDataForm, \"rCw3TGF59jAtgJVIex3lzc5gF7g=\");\n_c = FetchDataForm;\nexport default FetchDataForm;\nvar _c;\n$RefreshReg$(_c, \"FetchDataForm\");","map":{"version":3,"names":["React","useState","useEffect","fetchYouTubeData","axios","jsxDEV","_jsxDEV","API_BASE","FetchDataForm","_s","channelUrl","setChannelUrl","comments","setComments","error","setError","postComment","response","fetch","ok","Error","status","data","json","Array","isArray","console","err","handleFetch","alert","handleDownloadExcel","get","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","fetchComments","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","style","color","border","map","comment","comment_id","text","author","_c","$RefreshReg$"],"sources":["D:/Ankit Mishra/Django/YouTube-DataFetcher/frontend/src/pages/ProductsListPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchYouTubeData } from '../api/youtubeApi'; // Your API for fetching YouTube data\r\nimport axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:8000/youtube/';\r\n\r\nconst FetchDataForm = () => {\r\n  const [channelUrl, setChannelUrl] = useState(''); // For YouTube channel URL input\r\n  const [comments, setComments] = useState([]); // For storing fetched comments\r\n  const [error, setError] = useState(null); // For error handling\r\n\r\n  // Function to fetch comments from the backend\r\n  const postComment = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}comments/`); // Adjust API URL if needed\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n\r\n      // Validate if the response data is an array\r\n      if (Array.isArray(data)) {\r\n        setComments(data);\r\n      } else {\r\n        console.error('Expected an array, but received:', data);\r\n        setComments([]); // Fallback to empty array\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching comments:', err);\r\n      setError('Error fetching comments.');\r\n    }\r\n  };\r\n\r\n  // Function to handle fetching YouTube data\r\n  const handleFetch = async () => {\r\n    try {\r\n      await fetchYouTubeData(channelUrl); // Assuming this sends data to the backend\r\n      alert('Data Inserted  successfully!');\r\n      postComment(); // Fetch the stored comments after data is processed\r\n    } catch (err) {\r\n      alert('Error fetching YouTube data.');\r\n    }\r\n  };\r\n\r\n  // Function to download comments as an Excel file\r\n  const handleDownloadExcel = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}comments/`); // Adjust API URL if needed\r\n      if (!response.ok) {\r\n        throw new Error('Failed to download Excel file');\r\n      }\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'comments.xlsx');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentNode.removeChild(link);\r\n    } catch (err) {\r\n      alert('Error downloading the Excel file.');\r\n    }\r\n  };\r\n\r\n  // Fetch comments when the component mounts\r\n  useEffect(() => {\r\n    fetchComments(); // Fetch comments on component mount\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>YouTube Comments</h2>\r\n\r\n      {/* Input for YouTube Channel URL */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter YouTube Channel URL\"\r\n        value={channelUrl}\r\n        onChange={(e) => setChannelUrl(e.target.value)}\r\n      />\r\n      <button onClick={handleFetch}>Fetch Data</button>\r\n\r\n      {/* Error display */}\r\n      {error && <div style={{ color: 'red' }}>{error}</div>}\r\n\r\n      {/* Comments Table */}\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Comment ID</th>\r\n            <th>Comment Text</th>\r\n            <th>Author</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {comments.map((comment) => (\r\n            <tr key={comment.comment_id}>\r\n              <td>{comment.comment_id}</td>\r\n              <td>{comment.text}</td>\r\n              <td>{comment.author}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Button to download comments as Excel */}\r\n      <button onClick={handleDownloadExcel}>Download Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchDataForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,mBAAmB,CAAC,CAAC;AACtD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAG,gCAAgC;AAEjD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,WAAW,CAAC,CAAC,CAAC;MACtD,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QACvBT,WAAW,CAACS,IAAI,CAAC;MACnB,CAAC,MAAM;QACLI,OAAO,CAACZ,KAAK,CAAC,kCAAkC,EAAEQ,IAAI,CAAC;QACvDT,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MACnB;IACF,CAAC,CAAC,OAAOc,GAAG,EAAE;MACZD,OAAO,CAACZ,KAAK,CAAC,0BAA0B,EAAEa,GAAG,CAAC;MAC9CZ,QAAQ,CAAC,0BAA0B,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMzB,gBAAgB,CAACO,UAAU,CAAC,CAAC,CAAC;MACpCmB,KAAK,CAAC,8BAA8B,CAAC;MACrCb,WAAW,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZE,KAAK,CAAC,8BAA8B,CAAC;IACvC;EACF,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMb,KAAK,CAAC2B,GAAG,CAAC,GAAGxB,QAAQ,WAAW,CAAC,CAAC,CAAC;MAC1D,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;MACA,MAAMY,IAAI,GAAG,MAAMf,QAAQ,CAACe,IAAI,CAAC,CAAC;MAClC,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;MAC5C,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;MACfI,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,eAAe,CAAC;MAC9CH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;MAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;MACZP,IAAI,CAACQ,UAAU,CAACC,WAAW,CAACT,IAAI,CAAC;IACnC,CAAC,CAAC,OAAOV,GAAG,EAAE;MACZE,KAAK,CAAC,mCAAmC,CAAC;IAC5C;EACF,CAAC;;EAED;EACA3B,SAAS,CAAC,MAAM;IACd6C,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzC,OAAA;IAAA0C,QAAA,gBACE1C,OAAA;MAAA0C,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzB9C,OAAA;MACE+C,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,2BAA2B;MACvCC,KAAK,EAAE7C,UAAW;MAClB8C,QAAQ,EAAGC,CAAC,IAAK9C,aAAa,CAAC8C,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACF9C,OAAA;MAAQqD,OAAO,EAAE/B,WAAY;MAAAoB,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGhDtC,KAAK,iBAAIR,OAAA;MAAKsD,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAb,QAAA,EAAElC;IAAK;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAGrD9C,OAAA;MAAOwD,MAAM,EAAC,GAAG;MAAAd,QAAA,gBACf1C,OAAA;QAAA0C,QAAA,eACE1C,OAAA;UAAA0C,QAAA,gBACE1C,OAAA;YAAA0C,QAAA,EAAI;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnB9C,OAAA;YAAA0C,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrB9C,OAAA;YAAA0C,QAAA,EAAI;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACR9C,OAAA;QAAA0C,QAAA,EACGpC,QAAQ,CAACmD,GAAG,CAAEC,OAAO,iBACpB1D,OAAA;UAAA0C,QAAA,gBACE1C,OAAA;YAAA0C,QAAA,EAAKgB,OAAO,CAACC;UAAU;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC7B9C,OAAA;YAAA0C,QAAA,EAAKgB,OAAO,CAACE;UAAI;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvB9C,OAAA;YAAA0C,QAAA,EAAKgB,OAAO,CAACG;UAAM;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA,GAHlBY,OAAO,CAACC,UAAU;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIvB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGR9C,OAAA;MAAQqD,OAAO,EAAE7B,mBAAoB;MAAAkB,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAvGID,aAAa;AAAA4D,EAAA,GAAb5D,aAAa;AAyGnB,eAAeA,aAAa;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}