{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ankit Mishra\\\\Django\\\\YouTube-DataFetcher\\\\frontend\\\\src\\\\pages\\\\ProductsListPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:8000/youtube/';\nconst FetchDataForm = () => {\n  _s();\n  const [channelUrl, setChannelUrl] = useState(''); // For YouTube channel URL input\n  const [comments, setComments] = useState([]); // For storing fetched comments\n  const [error, setError] = useState(null); // For error handling\n\n  // Function to fetch comments from the backend\n  const fetchComments = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}comments/`);\n      if (response.status === 200) {\n        setComments(response.data);\n      } else {\n        throw new Error('Failed to fetch comments.');\n      }\n    } catch (err) {\n      console.error('Error fetching comments:', err);\n      setError('Error fetching comments.');\n    }\n  };\n\n  // Function to download all comments as an Excel file\n  const handleDownloadExcel = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}comments/`, {\n        responseType: 'blob' // Ensure response is treated as a binary file\n      });\n\n      // Create a downloadable link\n      const blob = new Blob([response.data], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'comments.pdf');\n      document.body.appendChild(link);\n      link.click();\n      link.parentNode.removeChild(link);\n    } catch (err) {\n      console.error('Error downloading the Excel file:', err);\n      alert('Error downloading the Excel file.');\n    }\n  };\n  useEffect(() => {\n    fetchComments(); // Fetch comments on component mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"YouTube Comments Fetcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter YouTube Channel URL\",\n      value: channelUrl,\n      onChange: e => setChannelUrl(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => alert('Fetch feature not implemented yet!'),\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.comment_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)]\n        }, comment.comment_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"3\",\n            children: \"No comments available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownloadExcel,\n      children: \"Download Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchDataForm, \"rCw3TGF59jAtgJVIex3lzc5gF7g=\");\n_c = FetchDataForm;\nexport default FetchDataForm;\nvar _c;\n$RefreshReg$(_c, \"FetchDataForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_BASE","FetchDataForm","_s","channelUrl","setChannelUrl","comments","setComments","error","setError","fetchComments","response","get","status","data","Error","err","console","handleDownloadExcel","responseType","blob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","border","length","map","comment","comment_id","text","author","colSpan","_c","$RefreshReg$"],"sources":["D:/Ankit Mishra/Django/YouTube-DataFetcher/frontend/src/pages/ProductsListPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:8000/youtube/';\r\n\r\nconst FetchDataForm = () => {\r\n  const [channelUrl, setChannelUrl] = useState(''); // For YouTube channel URL input\r\n  const [comments, setComments] = useState([]); // For storing fetched comments\r\n  const [error, setError] = useState(null); // For error handling\r\n\r\n  // Function to fetch comments from the backend\r\n  const fetchComments = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}comments/`);\r\n      if (response.status === 200) {\r\n        setComments(response.data);\r\n      } else {\r\n        throw new Error('Failed to fetch comments.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching comments:', err);\r\n      setError('Error fetching comments.');\r\n    }\r\n  };\r\n\r\n  // Function to download all comments as an Excel file\r\n  const handleDownloadExcel = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}comments/`, {\r\n        responseType: 'blob', // Ensure response is treated as a binary file\r\n      });\r\n\r\n      // Create a downloadable link\r\n      const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'comments.pdf');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentNode.removeChild(link);\r\n    } catch (err) {\r\n      console.error('Error downloading the Excel file:', err);\r\n      alert('Error downloading the Excel file.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchComments(); // Fetch comments on component mount\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>YouTube Comments Fetcher</h2>\r\n\r\n      {/* Input for YouTube Channel URL */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter YouTube Channel URL\"\r\n        value={channelUrl}\r\n        onChange={(e) => setChannelUrl(e.target.value)}\r\n      />\r\n      <button onClick={() => alert('Fetch feature not implemented yet!')}>Fetch Data</button>\r\n\r\n      {/* Comments Table */}\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Comment ID</th>\r\n            <th>Comment Text</th>\r\n            <th>Author</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {comments.length > 0 ? (\r\n            comments.map((comment) => (\r\n              <tr key={comment.comment_id}>\r\n                <td>{comment.comment_id}</td>\r\n                <td>{comment.text}</td>\r\n                <td>{comment.author}</td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"3\">No comments available</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Button to download comments as Excel */}\r\n      <button onClick={handleDownloadExcel}>Download Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchDataForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}