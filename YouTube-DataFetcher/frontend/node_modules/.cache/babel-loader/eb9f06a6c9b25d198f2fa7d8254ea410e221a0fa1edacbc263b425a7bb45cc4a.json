{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ankit Mishra\\\\Django\\\\YouTube-DataFetcher\\\\frontend\\\\src\\\\pages\\\\ProductsListPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = 'http://localhost:8000/youtube/';\n\n// Component to display comments in a table\nconst CommentsTable = ({\n  comments\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fetched Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.comment_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 17\n          }, this)]\n        }, comment.comment_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"3\",\n            children: \"No comments available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_c = CommentsTable;\nconst FetchDataForm = () => {\n  _s();\n  const [channelUrl, setChannelUrl] = useState(''); // For YouTube channel URL input\n  const [comments, setComments] = useState([]); // For storing fetched comments\n  const [error, setError] = useState(null); // For error handling\n\n  // Function to fetch comments from the backend\n  const fetchComments = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}comments/`); // Adjust API URL if needed\n      if (response.status === 200) {\n        setComments(response.data);\n      } else {\n        throw new Error(`Failed to fetch comments. Status: ${response.status}`);\n      }\n    } catch (err) {\n      console.error('Error fetching comments:', err);\n      setError('Error fetching comments.');\n    }\n  };\n\n  // Function to handle fetching YouTube data\n  const handleFetch = async () => {\n    try {\n      await axios.post(`${API_BASE}fetch-data/`, {\n        channel_url: channelUrl\n      }); // Adjust API URL and payload as needed\n      alert('Data fetched and stored successfully!');\n      fetchComments(); // Fetch the stored comments after data is processed\n    } catch (err) {\n      console.error('Error fetching YouTube data:', err);\n      alert('Error fetching YouTube data.');\n    }\n  };\n\n  // Function to download comments as an Excel file\n  const handleDownloadExcel = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}export-comments/`, {\n        responseType: 'blob'\n      }); // Adjust API URL if needed\n      const blob = new Blob([response.data], {\n        type: 'application/vnd.ms-excel'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'comments.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      link.parentNode.removeChild(link);\n    } catch (err) {\n      console.error('Error downloading the Excel file:', err);\n      alert('Error downloading the Excel file.');\n    }\n  };\n\n  // Fetch comments when the component mounts\n  useEffect(() => {\n    fetchComments(); // Fetch comments on component mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"YouTube Comments Fetcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter YouTube Channel URL\",\n      value: channelUrl,\n      onChange: e => setChannelUrl(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetch,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CommentsTable, {\n      comments: comments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDownloadExcel,\n      children: \"Download Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchDataForm, \"rCw3TGF59jAtgJVIex3lzc5gF7g=\");\n_c2 = FetchDataForm;\nexport default FetchDataForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"CommentsTable\");\n$RefreshReg$(_c2, \"FetchDataForm\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_BASE","CommentsTable","comments","children","fileName","_jsxFileName","lineNumber","columnNumber","border","length","map","comment","comment_id","text","author","colSpan","_c","FetchDataForm","_s","channelUrl","setChannelUrl","setComments","error","setError","fetchComments","response","get","status","data","Error","err","console","handleFetch","post","channel_url","alert","handleDownloadExcel","responseType","blob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","placeholder","value","onChange","e","target","onClick","style","color","_c2","$RefreshReg$"],"sources":["D:/Ankit Mishra/Django/YouTube-DataFetcher/frontend/src/pages/ProductsListPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:8000/youtube/';\r\n\r\n// Component to display comments in a table\r\nconst CommentsTable = ({ comments }) => {\r\n  return (\r\n    <div>\r\n      <h3>Fetched Comments</h3>\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Comment ID</th>\r\n            <th>Comment Text</th>\r\n            <th>Author</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {comments.length > 0 ? (\r\n            comments.map((comment) => (\r\n              <tr key={comment.comment_id}>\r\n                <td>{comment.comment_id}</td>\r\n                <td>{comment.text}</td>\r\n                <td>{comment.author}</td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"3\">No comments available</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FetchDataForm = () => {\r\n  const [channelUrl, setChannelUrl] = useState(''); // For YouTube channel URL input\r\n  const [comments, setComments] = useState([]); // For storing fetched comments\r\n  const [error, setError] = useState(null); // For error handling\r\n\r\n  // Function to fetch comments from the backend\r\n  const fetchComments = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}comments/`); // Adjust API URL if needed\r\n      if (response.status === 200) {\r\n        setComments(response.data);\r\n      } else {\r\n        throw new Error(`Failed to fetch comments. Status: ${response.status}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching comments:', err);\r\n      setError('Error fetching comments.');\r\n    }\r\n  };\r\n\r\n  // Function to handle fetching YouTube data\r\n  const handleFetch = async () => {\r\n    try {\r\n      await axios.post(`${API_BASE}fetch-data/`, { channel_url: channelUrl }); // Adjust API URL and payload as needed\r\n      alert('Data fetched and stored successfully!');\r\n      fetchComments(); // Fetch the stored comments after data is processed\r\n    } catch (err) {\r\n      console.error('Error fetching YouTube data:', err);\r\n      alert('Error fetching YouTube data.');\r\n    }\r\n  };\r\n\r\n  // Function to download comments as an Excel file\r\n  const handleDownloadExcel = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}export-comments/`, { responseType: 'blob' }); // Adjust API URL if needed\r\n      const blob = new Blob([response.data], { type: 'application/vnd.ms-excel' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'comments.xlsx');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentNode.removeChild(link);\r\n    } catch (err) {\r\n      console.error('Error downloading the Excel file:', err);\r\n      alert('Error downloading the Excel file.');\r\n    }\r\n  };\r\n\r\n  // Fetch comments when the component mounts\r\n  useEffect(() => {\r\n    fetchComments(); // Fetch comments on component mount\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>YouTube Comments Fetcher</h2>\r\n\r\n      {/* Input for YouTube Channel URL */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter YouTube Channel URL\"\r\n        value={channelUrl}\r\n        onChange={(e) => setChannelUrl(e.target.value)}\r\n      />\r\n      <button onClick={handleFetch}>Fetch Data</button>\r\n\r\n      {/* Error display */}\r\n      {error && <div style={{ color: 'red' }}>{error}</div>}\r\n\r\n      {/* Comments Table */}\r\n      <CommentsTable comments={comments} />\r\n\r\n      {/* Button to download comments as Excel */}\r\n      <button onClick={handleDownloadExcel}>Download Excel</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchDataForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}