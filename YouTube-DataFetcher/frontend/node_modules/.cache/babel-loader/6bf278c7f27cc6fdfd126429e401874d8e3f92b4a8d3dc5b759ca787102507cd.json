{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ankit Mishra\\\\Django\\\\YouTube-DataFetcher\\\\frontend\\\\src\\\\pages\\\\ProductsListPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchYouTubeData } from '../api/youtubeApi'; // Your API for fetching YouTube data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FetchDataForm = () => {\n  _s();\n  const [channelUrl, setChannelUrl] = useState('');\n  const [comments, setComments] = useState([]);\n\n  // Fetch comments when data is fetched from YouTube API\n  const handleFetch = async () => {\n    try {\n      await fetchYouTubeData(channelUrl); // Assuming this sends data to the backend\n      alert('Data fetched successfully!');\n      fetchComments(); // Fetch the stored comments from your backend\n    } catch (err) {\n      alert('Error fetching data.');\n    }\n  };\n  const fetchComments = async () => {\n    try {\n      const response = await fetch('/youtube/comments/'); // Backend endpoint to get comments\n      const data = await response.json();\n      setComments(data);\n    } catch (err) {\n      console.error('Error fetching comments:', err);\n    }\n  };\n  const handleSaveComment = async (commentId, text, author) => {\n    try {\n      const response = await fetch('/api/save-comment/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          commentId,\n          text,\n          author\n        })\n      });\n      if (response.ok) {\n        alert('Comment saved!');\n      }\n    } catch (err) {\n      alert('Error saving comment.');\n    }\n  };\n  const handleDownloadExcel = async () => {\n    try {\n      const response = await fetch('/api/export-comments/');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'comments.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      link.parentNode.removeChild(link);\n    } catch (err) {\n      alert('Error downloading the Excel file.');\n    }\n  };\n  useEffect(() => {\n    fetchComments(); // Fetch comments when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter YouTube Channel URL\",\n      value: channelUrl,\n      onChange: e => setChannelUrl(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetch,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Comment Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.comment_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: comment.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSaveComment(comment.comment_id, comment.text, comment.author),\n              children: \"Save Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDownloadExcel,\n              children: \"Download Excel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, comment.comment_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchDataForm, \"pYph7BCcFe/9i/Dk2xp3dFFFGeA=\");\n_c = FetchDataForm;\nexport default FetchDataForm;\nvar _c;\n$RefreshReg$(_c, \"FetchDataForm\");","map":{"version":3,"names":["React","useState","useEffect","fetchYouTubeData","jsxDEV","_jsxDEV","FetchDataForm","_s","channelUrl","setChannelUrl","comments","setComments","handleFetch","alert","fetchComments","err","response","fetch","data","json","console","error","handleSaveComment","commentId","text","author","method","headers","body","JSON","stringify","ok","handleDownloadExcel","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","border","map","comment","comment_id","_c","$RefreshReg$"],"sources":["D:/Ankit Mishra/Django/YouTube-DataFetcher/frontend/src/pages/ProductsListPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchYouTubeData } from '../api/youtubeApi'; // Your API for fetching YouTube data\r\n\r\nconst FetchDataForm = () => {\r\n  const [channelUrl, setChannelUrl] = useState('');\r\n  const [comments, setComments] = useState([]);\r\n\r\n  // Fetch comments when data is fetched from YouTube API\r\n  const handleFetch = async () => {\r\n    try {\r\n      await fetchYouTubeData(channelUrl); // Assuming this sends data to the backend\r\n      alert('Data fetched successfully!');\r\n      fetchComments(); // Fetch the stored comments from your backend\r\n    } catch (err) {\r\n      alert('Error fetching data.');\r\n    }\r\n  };\r\n\r\n  const fetchComments = async () => {\r\n    try {\r\n      const response = await fetch('/youtube/comments/'); // Backend endpoint to get comments\r\n      const data = await response.json();\r\n      setComments(data);\r\n    } catch (err) {\r\n      console.error('Error fetching comments:', err);\r\n    }\r\n  };\r\n\r\n  const handleSaveComment = async (commentId, text, author) => {\r\n    try {\r\n      const response = await fetch('/api/save-comment/', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ commentId, text, author })\r\n      });\r\n      if (response.ok) {\r\n        alert('Comment saved!');\r\n      }\r\n    } catch (err) {\r\n      alert('Error saving comment.');\r\n    }\r\n  };\r\n\r\n  const handleDownloadExcel = async () => {\r\n    try {\r\n      const response = await fetch('/api/export-comments/');\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'comments.xlsx');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentNode.removeChild(link);\r\n    } catch (err) {\r\n      alert('Error downloading the Excel file.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchComments(); // Fetch comments when the component mounts\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter YouTube Channel URL\"\r\n        value={channelUrl}\r\n        onChange={(e) => setChannelUrl(e.target.value)}\r\n      />\r\n      <button onClick={handleFetch}>Fetch Data</button>\r\n\r\n      <table border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th>Comment ID</th>\r\n            <th>Comment Text</th>\r\n            <th>Author</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {comments.map((comment) => (\r\n            <tr key={comment.comment_id}>\r\n              <td>{comment.comment_id}</td>\r\n              <td>{comment.text}</td>\r\n              <td>{comment.author}</td>\r\n              <td>\r\n                <button onClick={() => handleSaveComment(comment.comment_id, comment.text, comment.author)}>\r\n                  Save Comment\r\n                </button>\r\n                <button onClick={handleDownloadExcel}>Download Excel</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchDataForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}